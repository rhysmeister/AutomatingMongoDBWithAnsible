---
- name: Ensure required packages are installed
  yum:
    name: "{{ required_packages }}"

- name: Remove the old mongodb repository
  yum_repository:
    name: "mongodb-{{ current_mongodb_version }}"
    state: absent
  when: current_mongodb_version is defined

- name: Ensure the target mongodb repository exists
  include_role:
    name: community.mongodb.mongodb_repository
  vars:
    mongodb_version: "{{ target_mongodb_version }}"
  when: target_mongodb_version is defined

- name: Ensure mongodb-org* packages are version unlocked
  shell: yum versionlock delete mongodb-org*
  args:
    warn: no

- name: Remove version lock confirmation file
  file:
    path: /root/mongo_version_lock.success
    state: absent

- name: Shutdown the mongod process cleanly
  community.mongodb.mongodb_shutdown:
    login_user: "{{ admin_user }}"
    login_password: "{{ admin_user_password }}"
    login_port: "{{ mongod_port }}"

- name: RedHat 8 in docker force stop (pidfile missing)
  import_tasks: redhat8_docker_force_stop.yml
  tags:
    - never

# Upgrade/Downgrade will start the service, so we need to make config adjustments first.
- name: RedHat 8 in docker fix before upgrade/downgrade
  import_tasks: redhat8_docker_fix.yml
  tags:
    - never

- name: Downgrade the mongod package
  yum:
    name: "mongodb-org-server-{{ specific_package_version | default(target_mongodb_version) }}*"
    state: present
    update_cache: yes
    allow_downgrade: yes
  when:
    - mongodb_downgrade is defined
    - mongodb_downgrade == True
  register: mongod_downgraded

- name: Upgrade mongod package
  yum:
    name: "mongodb-org-server-{{ specific_package_version | default(target_mongodb_version) }}*"
    state: latest
  when:
    - mongodb_downgrade is not defined or mongodb_downgrade == False
  register: mongod_upgraded

- name: Look for mongod after upgrade/downgrade to see if auto started
  block:
    - name: Inspect mongod process after upgrade/downgrade
      shell: "ps aux | grep mongo; systemctl status {{ mongod_service }}"
      failed_when: no
      changed_when: no
      register: _status_task
    - debug:
        msg: "{{ _status_task.stdout_lines }}"

- name: Reboot the node
  reboot:
    reboot_timeout: "{{ reboot_timeout }}"
  when:
    - (mongod_upgraded is defined and mongod_upgraded.changed) or (mongod_downgraded is defined and mongod_downgraded.changed)
  tags:
    - reboot

- name: RedHat 8 in docker fix after upgrade/downgrade
  import_tasks: redhat8_docker_fix.yml
  tags:
    - never

- name: Ensure mongod service starts
  block:
    - name: Inspect mongod service before service start
      shell: "ps aux | grep mongo; systemctl status {{ mongod_service }}"
      failed_when: no
      changed_when: no
      register: _status_task
    - debug:
        msg: "{{ _status_task.stdout_lines }}"
    - name: Ensure mongod service starts
      service:
        name: "{{ mongod_service }}"
        state: started
        enabled: yes
      register: _service_start_task
  always:
    - debug:
        msg: "systemd says {{ mongod_service }} is {{ (_service_stop_task | default({})).state | default('NA') }}"
    - name: Inspect mongod service after service start
      shell: "ps aux | grep mongo; systemctl status {{ mongod_service }}"
      failed_when: no
      changed_when: no
      register: _status_task
    - debug:
        msg: "{{ _status_task.stdout_lines }}"

- name: Wait for mongod to become active
  wait_for:
    port: "{{ mongod_port }}"
    delay: 10

- name: Check the version of mongod
  shell: mongod --version | head -n 1
  register: mongod
  when: target_mongodb_version is defined

- name: Validate the running version of mongod
  assert:
    that: "'db version v{{ target_mongodb_version }}' in mongod.stdout"
  when: target_mongodb_version is defined

- name: Ensure mongodb-org* packages are version locked again
  shell: yum versionlock mongodb-org* && touch /root/mongo_version_lock.success
  args:
    creates: /root/mongo_version_lock.success
