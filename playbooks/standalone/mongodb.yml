---
- hosts: all
  gather_facts: yes
  vars_files:
    - ./vault.yml
  roles:
    - role: "community.mongodb.mongodb_linux"
    - role: "community.mongodb.mongodb_selinux"
    - role: "community.mongodb.mongodb_repository"
      mongodb_version: "4.2"
    - { role: community.mongodb.mongodb_mongod, replicaset: false, sharding: false }

  tasks:

    - name: Ensure python3 is available
      package:
        name: python3

    - name: Ensure pymongo is installed
      pip:
        name: pymongo==3.12.2
        state: present

    - name: Ensure mongo shell is installed
      package:
        name: mongodb-org-shell
        state: present

    - name: Has MongoDB Admin User been created already?
      stat:
        path: /root/mongodb_admin.success
      register: mongodb_admin

    - debug:
        var: mongodb_admin

    - name: Add MongoDB Admin User using localhost exception
      community.mongodb.mongodb_user:
        name: "{{ admin_user }}"
        password: "{{ admin_user_password }}"
        database: admin
        roles:
          - "root"
      when:
        - mongodb_admin.stat.exists == False

    - shell: "mongo admin --username {{ admin_user }} --password {{ admin_user_password }} --eval 'db.runCommand({listDatabases: 1})' && touch /root/mongodb_admin.success"
      args:
        creates: /root/mongodb_admin.success
      when:
        - mongodb_admin.stat.exists == False
      ignore_errors: yes

    - name: Have MongoDB App Users been created already?
      stat:
        path: /root/mongodb_users.success
      register: mongodb_users

    - name: Add MongoDB App Users
      community.mongodb.mongodb_user:
        login_user: "{{ admin_user }}"
        login_password: "{{ admin_user_password }}"
        login_database: admin
        user: "{{ item.username }}"
        password: "{{ item.password }}"
        database: "{{ item.database }}"
        roles: "{{ item.roles }}"
      with_items:
        - "{{ app_users }}"
      when:
        - mongodb_users.stat.exists == False
      no_log: yes

    - shell: "mongo {{ item.database }} --username {{ item.username }} --password {{ item.password }} --eval 'db.runCommand({listCollections: 1})' && touch /root/mongodb_users.success"
      args:
        creates: /root/mongodb_users.success
      when:
        - mongodb_users.stat.exists == False
      with_items:
        - "{{ app_users }}"
      no_log: yes
      ignore_errors: yes
